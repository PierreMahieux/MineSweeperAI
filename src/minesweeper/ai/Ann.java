package minesweeper.ai;

import java.util.ArrayList;

import minesweeper.model.Brain;
import utils.Matrix;
import minesweeper.boardgame.MineSweeper;

public class Ann {

	protected final int SIZE_OUTPUT = 4;
	
	private Brain brain;
	private ArrayList<Integer> layers = new ArrayList<Integer>();
	private Matrix outputs = null, inputs = null;
		
	/***
	 * Create an Artificial Neural Network based on a given boardgame.
	 * The ANN will have 1 input neuron per boardgame box and 4 output neurons.
	 * Hidden layers are generated by using the "pyramid rule" as exposed in the class from Pierre Chevaillier.
	 * @param board
	 */
	public Ann(MineSweeper board) {
		int boardSize = board.getSquareSide();
		int inputLayerSize = boardSize*boardSize;
		
		double r = Math.cbrt(inputLayerSize/SIZE_OUTPUT);
		
		layers.add(inputLayerSize);
		layers.add((int)(SIZE_OUTPUT*r*r));
		layers.add((int)(SIZE_OUTPUT*r));
		layers.add(SIZE_OUTPUT);
		
		brain = new Brain(layers);
	}
	
	public String toString() {
		return "Brain : " + brain.toString() + "\nLayers : " + layers.toString();
	}
	
	/***
	 * Just play a turn of the game
	 */
	public void playTurn(MineSweeper board) {
		inputs = convertBoardToMatrix(board);
		outputs = brain.compute(inputs);
		System.out.println(outputs);
	}
	
	/***
	 * Converts a MineSweeper board into an input Matrix.
	 * @param board
	 * @return the Matrix representing the board
	 */
	public Matrix convertBoardToMatrix(MineSweeper board) {
		int[] intSnap = board.getBoardSnapshot();
		double[] doubleSnap = new double[intSnap.length];
		
		for (int i = 0; i < intSnap.length; i++ ) {
			doubleSnap[i] = (double)intSnap[i];
		}
		double [][] in = {doubleSnap};
		
		return new Matrix(in);
	}
}
